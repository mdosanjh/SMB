-*- text -*-

Sandia Real-World Message Rate Benchmark (msgrate)
RMA-MT variant
--------------------------------------------------

This README describes the Sandia Real-World Message Rate Benchmark
(msgrate) RMA-MT variant, in terms of both goals and methodology.  Build and
execution instructions are also included.

* Build and Execution:

  RMA-MT uses the MPI RMA MPI bindings to test one sided communications 

  By default, the test requires at least 7 processes to be used in
  testing, although as few as three can be used if the number of peers
  is set sufficiently low.  A number of parameters control the
  experiment:

    -p <num>     Number of peers used in communication
    -i <num>     Number of iterations per test
    -m <num>     Number of messages per peer per iteration
    -s <size>    Number of bytes per message
    -c <size>    Cache size in bytes
    -n <ppn>     Number of procs per node
    -o           Format output to be machine readable
    -t <num>     Number of threads doing communication.
    -r <num>     RMA synchronization mode (0 for fence, 1 for lock/unlock, 
                                             2 for PSCW, 3 for lockall/unlockall)
    -u <num>     RMA transfer mode (0 is put, 1 is get) 

* Goals:

  Unlike tradition message rate benchmarks, which attempts to discover
  peak message rate in ideal conditions, our message rate benchmark is
  more concerned with sustained message throughput in application
  scenarios.  We are concerned with how three different
  characteristics of the message pattern influence message rate:

  1) Cold Cache Start-up:  Unlike traditional microbenchmarks, which
     work hard to warm both the cache and network before execution of
     the test, the msgrate benchmark attempts to invalidate the cache
     at the start of each iteration.  This cache invalidation seeks to
     mimic the effect of the "real work" part of a scientific code,
     which is likely to include a large enough computation step to
     result in a data cache devoid of the RMA windows.

  2) Multiple Communication Peers: The benchmark will simultaneously
     communicate with a specified number of peers.  

* Methodology:

There are two different communication patterns of interest to us,
based on codes of interest.  Assume that peers is a list of npeers in
length which is ordered to contain the npeers/2 "lower" peers, in
ascending order followed by npeers/2 "higher" peers.

- Single direction: This test approximates the behavior of traditional
  message rate benchmarks, with a given peer communicating with
  exactly one other peer (and only in one direction).  The cache
  invalidation phase, which mimics the effect of an application
  working set, is the only notable addition. 


- Halo exchange: Because the RMA Windows must be initialized 
  before any communication can be done, the only valid halo exchange 
  variant that can be converted is the ‘pre-posted’ halo exchange from 
  the original SMBs. This test works similar to that.

(For a more detailed description of the algorithms, cache invalidation and 
so on, please refer to the README in the original SMBs.
